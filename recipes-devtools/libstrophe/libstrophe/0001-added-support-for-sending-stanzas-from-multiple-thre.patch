From 324a79336084096ae5b258ab11d9fbb68202a09e Mon Sep 17 00:00:00 2001
From: Alexandru Radovici <msg4alex@gmail.com>
Date: Tue, 16 Jul 2013 22:51:04 +0000
Subject: [PATCH] added support for sending stanzas from multiple threads

---
 src/common.h |  2 ++
 src/conn.c   | 12 ++++++++++++
 src/event.c  |  8 ++++++++
 3 files changed, 22 insertions(+)

diff --git a/src/common.h b/src/common.h
index 9434e6f..8a1fa53 100644
--- a/src/common.h
+++ b/src/common.h
@@ -32,6 +32,7 @@
 #include "hash.h"
 #include "util.h"
 #include "parser.h"
+#include "thread.h"
 
 /** run-time context **/
 
@@ -188,6 +189,7 @@ struct _xmpp_conn_t {
     int send_queue_len;
     xmpp_send_queue_t *send_queue_head;
     xmpp_send_queue_t *send_queue_tail;
+    mutex_t *sq_mutex;
 
     /* xml parser */
     int reset_parser;
diff --git a/src/conn.c b/src/conn.c
index 26df418..8f10972 100644
--- a/src/conn.c
+++ b/src/conn.c
@@ -29,6 +29,8 @@
 #include "util.h"
 #include "parser.h"
 
+#include "thread.h"
+
 #ifndef DEFAULT_SEND_QUEUE_MAX
 /** @def DEFAULT_SEND_QUEUE_MAX
  *  The default maximum send queue size.  This is currently unused.
@@ -93,6 +95,7 @@ xmpp_conn_t *xmpp_conn_new(xmpp_ctx_t * const ctx)
 	conn->send_queue_len = 0;
 	conn->send_queue_head = NULL;
 	conn->send_queue_tail = NULL;
+	conn->sq_mutex = mutex_create (ctx);
 
 	/* default timeouts */
 	conn->connect_timeout = CONNECT_TIMEOUT;
@@ -274,6 +277,11 @@ int xmpp_conn_release(xmpp_conn_t * const conn)
 	if (conn->pass) xmpp_free(ctx, conn->pass);
 	if (conn->stream_id) xmpp_free(ctx, conn->stream_id);
 	if (conn->lang) xmpp_free(ctx, conn->lang);
+
+	// send queue mutex
+	mutex_destroy (conn->sq_mutex);
+	conn->sq_mutex = NULL;
+
 	xmpp_free(ctx, conn);
 	released = 1;
     }
@@ -608,6 +616,8 @@ void xmpp_send_raw(xmpp_conn_t * const conn,
     item->next = NULL;
     item->written = 0;
 
+    mutex_lock (conn->sq_mutex);
+
     /* add item to the send queue */
     if (!conn->send_queue_tail) {
 	/* first item, set head and tail */
@@ -619,6 +629,8 @@ void xmpp_send_raw(xmpp_conn_t * const conn,
 	conn->send_queue_tail = item;
     }
     conn->send_queue_len++;
+
+    mutex_unlock (conn->sq_mutex);
 }
 
 /** Send an XML stanza to the XMPP server.
diff --git a/src/event.c b/src/event.c
index 1eaa643..c0f03bc 100644
--- a/src/event.c
+++ b/src/event.c
@@ -50,6 +50,7 @@
 #include <strophe.h>
 #include "common.h"
 #include "parser.h"
+#include "thread.h"
 
 #ifndef DEFAULT_TIMEOUT
 /** @def DEFAULT_TIMEOUT
@@ -113,6 +114,7 @@ void xmpp_run_once(xmpp_ctx_t *ctx, const unsigned long timeout)
 	}
 
 	/* write all data from the send queue to the socket */
+
 	sq = conn->send_queue_head;
 	while (sq) {
 	    towrite = sq->len - sq->written;
@@ -144,6 +146,8 @@ void xmpp_run_once(xmpp_ctx_t *ctx, const unsigned long timeout)
 		}
 	    }
 
+	    mutex_lock (conn->sq_mutex);
+
 	    /* all data for this queue item written, delete and move on */
 	    xmpp_free(ctx, sq->data);
 	    tsq = sq;
@@ -154,6 +158,10 @@ void xmpp_run_once(xmpp_ctx_t *ctx, const unsigned long timeout)
 	    conn->send_queue_head = sq;
 	    /* if we've sent everything update the tail */
 	    if (!sq) conn->send_queue_tail = NULL;
+
+	    conn->send_queue_len--;
+
+	    mutex_unlock (conn->sq_mutex);
 	}
 
 	/* tear down connection on error */
-- 
2.4.1

